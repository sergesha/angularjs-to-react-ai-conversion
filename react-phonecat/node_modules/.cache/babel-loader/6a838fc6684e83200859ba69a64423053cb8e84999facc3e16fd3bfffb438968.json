{"ast":null,"code":"import axios from 'axios';\n\n// We'll use axios instead of $resource from AngularJS\nconst api = axios.create({\n  baseURL: '/assets/',\n  // Points to public/assets directory\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nconst PhoneService = {\n  // Get all phones\n  getPhones: async () => {\n    try {\n      console.log('Fetching phones...');\n      const response = await api.get('phones/phones.json');\n      console.log('Phone data received:', response.data);\n\n      // Ensure we return an array\n      if (Array.isArray(response.data)) {\n        return response.data;\n      } else {\n        console.error('Response data is not an array:', response.data);\n        return [];\n      }\n    } catch (error) {\n      console.error('Error fetching phones:', error);\n      // Log more details about the error\n      if (error.response) {\n        console.error('Error response data:', error.response.data);\n        console.error('Error response status:', error.response.status);\n      } else if (error.request) {\n        console.error('No response received for request:', error.request);\n      }\n      return [];\n    }\n  },\n  // Get a specific phone by ID\n  getPhone: async phoneId => {\n    try {\n      console.log(`Fetching phone with ID: ${phoneId}`);\n      const response = await api.get(`phones/${phoneId}.json`);\n      console.log(`Phone ${phoneId} data received:`, response.data);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching phone ${phoneId}:`, error);\n      if (error.response) {\n        console.error('Error response data:', error.response.data);\n        console.error('Error response status:', error.response.status);\n      }\n      return null;\n    }\n  }\n};\nexport default PhoneService;","map":{"version":3,"names":["axios","api","create","baseURL","headers","PhoneService","getPhones","console","log","response","get","data","Array","isArray","error","status","request","getPhone","phoneId"],"sources":["/Users/Sergey_Shakhmatov/Projects/epam/codemie/angularjs-to-react-ai-conversion/react-phonecat/src/services/PhoneService.js"],"sourcesContent":["import axios from 'axios';\n\n// We'll use axios instead of $resource from AngularJS\nconst api = axios.create({\n  baseURL: '/assets/', // Points to public/assets directory\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nconst PhoneService = {\n  // Get all phones\n  getPhones: async () => {\n    try {\n      console.log('Fetching phones...');\n      const response = await api.get('phones/phones.json');\n      console.log('Phone data received:', response.data);\n      \n      // Ensure we return an array\n      if (Array.isArray(response.data)) {\n        return response.data;\n      } else {\n        console.error('Response data is not an array:', response.data);\n        return [];\n      }\n    } catch (error) {\n      console.error('Error fetching phones:', error);\n      // Log more details about the error\n      if (error.response) {\n        console.error('Error response data:', error.response.data);\n        console.error('Error response status:', error.response.status);\n      } else if (error.request) {\n        console.error('No response received for request:', error.request);\n      }\n      return [];\n    }\n  },\n\n  // Get a specific phone by ID\n  getPhone: async (phoneId) => {\n    try {\n      console.log(`Fetching phone with ID: ${phoneId}`);\n      const response = await api.get(`phones/${phoneId}.json`);\n      console.log(`Phone ${phoneId} data received:`, response.data);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching phone ${phoneId}:`, error);\n      if (error.response) {\n        console.error('Error response data:', error.response.data);\n        console.error('Error response status:', error.response.status);\n      }\n      return null;\n    }\n  },\n};\n\nexport default PhoneService;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,UAAU;EAAE;EACrBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,MAAMC,YAAY,GAAG;EACnB;EACAC,SAAS,EAAE,MAAAA,CAAA,KAAY;IACrB,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;MACjC,MAAMC,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAG,CAAC,oBAAoB,CAAC;MACpDH,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEC,QAAQ,CAACE,IAAI,CAAC;;MAElD;MACA,IAAIC,KAAK,CAACC,OAAO,CAACJ,QAAQ,CAACE,IAAI,CAAC,EAAE;QAChC,OAAOF,QAAQ,CAACE,IAAI;MACtB,CAAC,MAAM;QACLJ,OAAO,CAACO,KAAK,CAAC,gCAAgC,EAAEL,QAAQ,CAACE,IAAI,CAAC;QAC9D,OAAO,EAAE;MACX;IACF,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C;MACA,IAAIA,KAAK,CAACL,QAAQ,EAAE;QAClBF,OAAO,CAACO,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACL,QAAQ,CAACE,IAAI,CAAC;QAC1DJ,OAAO,CAACO,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACL,QAAQ,CAACM,MAAM,CAAC;MAChE,CAAC,MAAM,IAAID,KAAK,CAACE,OAAO,EAAE;QACxBT,OAAO,CAACO,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAACE,OAAO,CAAC;MACnE;MACA,OAAO,EAAE;IACX;EACF,CAAC;EAED;EACAC,QAAQ,EAAE,MAAOC,OAAO,IAAK;IAC3B,IAAI;MACFX,OAAO,CAACC,GAAG,CAAC,2BAA2BU,OAAO,EAAE,CAAC;MACjD,MAAMT,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAG,CAAC,UAAUQ,OAAO,OAAO,CAAC;MACxDX,OAAO,CAACC,GAAG,CAAC,SAASU,OAAO,iBAAiB,EAAET,QAAQ,CAACE,IAAI,CAAC;MAC7D,OAAOF,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,wBAAwBI,OAAO,GAAG,EAAEJ,KAAK,CAAC;MACxD,IAAIA,KAAK,CAACL,QAAQ,EAAE;QAClBF,OAAO,CAACO,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACL,QAAQ,CAACE,IAAI,CAAC;QAC1DJ,OAAO,CAACO,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACL,QAAQ,CAACM,MAAM,CAAC;MAChE;MACA,OAAO,IAAI;IACb;EACF;AACF,CAAC;AAED,eAAeV,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
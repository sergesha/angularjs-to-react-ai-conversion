{"ast":null,"code":"// PhoneService.js - This service replaces the $http functionality from AngularJS\nconst PhoneService = {\n  // Get all phones\n  getPhones: async () => {\n    try {\n      console.log('Fetching phones from API...');\n      // Direct path to the JSON file in the public folder\n      const response = await fetch('/assets/phones/phones.json');\n      console.log('Response status:', response.status);\n      console.log('Response headers:', [...response.headers.entries()]);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      // Get the text content first\n      const textContent = await response.text();\n      console.log('Raw text content:', textContent.substring(0, 100) + '...');\n\n      // Clean the text content to fix any invalid control characters\n      const cleanedText = textContent.replace(/[\\r\\n]+/g, ' ') // Replace carriage returns and newlines with space\n      .replace(/\\t/g, ' ') // Replace tabs with space\n      .replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, ''); // Remove control chars\n\n      // Parse the cleaned JSON\n      try {\n        const data = JSON.parse(cleanedText);\n        console.log('Phone data received:', data);\n        if (Array.isArray(data)) {\n          return data;\n        } else {\n          console.error('Received data is not an array:', data);\n          return [];\n        }\n      } catch (parseError) {\n        console.error('Error parsing phones JSON:', parseError);\n        console.log('Using hardcoded phone data as fallback');\n\n        // Fallback to hardcoded data if JSON parsing fails\n        return [{\n          \"age\": 0,\n          \"id\": \"motorola-xoom-with-wi-fi\",\n          \"imageUrl\": \"img/phones/motorola-xoom-with-wi-fi.0.jpg\",\n          \"name\": \"Motorola XOOM™ with Wi-Fi\",\n          \"snippet\": \"The Next, Next Generation\\n\\nExperience the future with Motorola XOOM with Wi-Fi, the world's first tablet powered by Android 3.0 (Honeycomb).\"\n        }, {\n          \"age\": 1,\n          \"id\": \"motorola-xoom\",\n          \"imageUrl\": \"img/phones/motorola-xoom.0.jpg\",\n          \"name\": \"MOTOROLA XOOM™\",\n          \"snippet\": \"The Next, Next Generation\\n\\nExperience the future with MOTOROLA XOOM, the world's first tablet powered by Android 3.0 (Honeycomb).\"\n        }];\n      }\n    } catch (error) {\n      console.error('Error fetching phones:', error);\n      console.log('Using hardcoded fallback data');\n\n      // Fallback to hardcoded data if fetch fails\n      return [{\n        \"age\": 0,\n        \"id\": \"motorola-xoom-with-wi-fi\",\n        \"imageUrl\": \"img/phones/motorola-xoom-with-wi-fi.0.jpg\",\n        \"name\": \"Motorola XOOM™ with Wi-Fi\",\n        \"snippet\": \"The Next, Next Generation\\n\\nExperience the future with Motorola XOOM with Wi-Fi, the world's first tablet powered by Android 3.0 (Honeycomb).\"\n      }, {\n        \"age\": 1,\n        \"id\": \"motorola-xoom\",\n        \"imageUrl\": \"img/phones/motorola-xoom.0.jpg\",\n        \"name\": \"MOTOROLA XOOM™\",\n        \"snippet\": \"The Next, Next Generation\\n\\nExperience the future with MOTOROLA XOOM, the world's first tablet powered by Android 3.0 (Honeycomb).\"\n      }];\n    }\n  },\n  // Get a specific phone by ID\n  getPhone: async phoneId => {\n    try {\n      console.log(`Fetching phone with ID: ${phoneId}`);\n      const response = await fetch(`/assets/phones/${phoneId}.json`);\n      console.log(`Phone ${phoneId} response status:`, response.status);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      // Get the text content first\n      const textContent = await response.text();\n      console.log(`Phone ${phoneId} raw text:`, textContent.substring(0, 100) + '...');\n\n      // Clean the text content to fix any invalid control characters\n      const cleanedText = textContent.replace(/[\\r\\n]+/g, ' ') // Replace carriage returns and newlines with space\n      .replace(/\\t/g, ' ') // Replace tabs with space\n      .replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, ''); // Remove control chars\n\n      // Parse the cleaned JSON\n      try {\n        const data = JSON.parse(cleanedText);\n        console.log(`Phone ${phoneId} data received:`, data);\n        return data;\n      } catch (parseError) {\n        console.error(`Error parsing phone ${phoneId} JSON:`, parseError);\n\n        // If we have motorola-xoom-with-wi-fi as a fallback, use it\n        if (phoneId === 'motorola-xoom-with-wi-fi') {\n          return {\n            \"additionalFeatures\": \"Sensors: proximity, ambient light, barometer, gyroscope\",\n            \"android\": {\n              \"os\": \"Android 3.0\",\n              \"ui\": \"Honeycomb\"\n            },\n            \"availability\": [\"Verizon\"],\n            \"battery\": {\n              \"standbyTime\": \"336 hours\",\n              \"talkTime\": \"24 hours\",\n              \"type\": \"Other (12 500 mAH)\"\n            },\n            \"camera\": {\n              \"features\": [\"Flash\", \"Video\"],\n              \"primary\": \"5.0 megapixels\"\n            },\n            \"connectivity\": {\n              \"bluetooth\": \"Bluetooth 2.1\",\n              \"cell\": \"CDMA 800 /1900 LTE 700, Rx diversity in all bands\",\n              \"gps\": true,\n              \"infrared\": false,\n              \"wifi\": \"802.11 a/b/g/n\"\n            },\n            \"description\": \"Motorola XOOM with Wi-Fi has a super-powerful dual-core processor and Android™ 3.0 (Honeycomb) — the Android platform designed specifically for tablets. With its 10.1-inch HD widescreen display, you'll enjoy HD video in a thin, light, powerful and upgradeable tablet.\",\n            \"display\": {\n              \"screenResolution\": \"WXGA (1200 x 800)\",\n              \"screenSize\": \"10.1 inches\",\n              \"touchScreen\": true\n            },\n            \"hardware\": {\n              \"accelerometer\": true,\n              \"audioJack\": \"3.5mm\",\n              \"cpu\": \"1 GHz Dual Core Tegra 2\",\n              \"fmRadio\": false,\n              \"physicalKeyboard\": false,\n              \"usb\": \"USB 2.0\"\n            },\n            \"id\": \"motorola-xoom-with-wi-fi\",\n            \"images\": [\"img/phones/motorola-xoom-with-wi-fi.0.jpg\", \"img/phones/motorola-xoom-with-wi-fi.1.jpg\", \"img/phones/motorola-xoom-with-wi-fi.2.jpg\", \"img/phones/motorola-xoom-with-wi-fi.3.jpg\", \"img/phones/motorola-xoom-with-wi-fi.4.jpg\", \"img/phones/motorola-xoom-with-wi-fi.5.jpg\"],\n            \"name\": \"Motorola XOOM™ with Wi-Fi\",\n            \"sizeAndWeight\": {\n              \"dimensions\": [\"249.1 mm (w)\", \"167.8 mm (h)\", \"12.9 mm (d)\"],\n              \"weight\": \"708.0 grams\"\n            },\n            \"storage\": {\n              \"flash\": \"32000MB\",\n              \"ram\": \"1000MB\"\n            }\n          };\n        }\n\n        // Create a fallback phone object with minimal data\n        return {\n          id: phoneId,\n          name: \"Phone Details Unavailable\",\n          description: \"Sorry, we couldn't load the details for this phone.\",\n          images: []\n        };\n      }\n    } catch (error) {\n      console.error(`Error fetching phone ${phoneId}:`, error);\n\n      // If we have motorola-xoom-with-wi-fi as a fallback, use it\n      if (phoneId === 'motorola-xoom-with-wi-fi') {\n        return {\n          \"additionalFeatures\": \"Sensors: proximity, ambient light, barometer, gyroscope\",\n          \"android\": {\n            \"os\": \"Android 3.0\",\n            \"ui\": \"Honeycomb\"\n          },\n          \"availability\": [\"Verizon\"],\n          \"battery\": {\n            \"standbyTime\": \"336 hours\",\n            \"talkTime\": \"24 hours\",\n            \"type\": \"Other (12 500 mAH)\"\n          },\n          \"camera\": {\n            \"features\": [\"Flash\", \"Video\"],\n            \"primary\": \"5.0 megapixels\"\n          },\n          \"connectivity\": {\n            \"bluetooth\": \"Bluetooth 2.1\",\n            \"cell\": \"CDMA 800 /1900 LTE 700, Rx diversity in all bands\",\n            \"gps\": true,\n            \"infrared\": false,\n            \"wifi\": \"802.11 a/b/g/n\"\n          },\n          \"description\": \"Motorola XOOM with Wi-Fi has a super-powerful dual-core processor and Android™ 3.0 (Honeycomb) — the Android platform designed specifically for tablets. With its 10.1-inch HD widescreen display, you'll enjoy HD video in a thin, light, powerful and upgradeable tablet.\",\n          \"display\": {\n            \"screenResolution\": \"WXGA (1200 x 800)\",\n            \"screenSize\": \"10.1 inches\",\n            \"touchScreen\": true\n          },\n          \"hardware\": {\n            \"accelerometer\": true,\n            \"audioJack\": \"3.5mm\",\n            \"cpu\": \"1 GHz Dual Core Tegra 2\",\n            \"fmRadio\": false,\n            \"physicalKeyboard\": false,\n            \"usb\": \"USB 2.0\"\n          },\n          \"id\": \"motorola-xoom-with-wi-fi\",\n          \"images\": [\"img/phones/motorola-xoom-with-wi-fi.0.jpg\", \"img/phones/motorola-xoom-with-wi-fi.1.jpg\", \"img/phones/motorola-xoom-with-wi-fi.2.jpg\", \"img/phones/motorola-xoom-with-wi-fi.3.jpg\", \"img/phones/motorola-xoom-with-wi-fi.4.jpg\", \"img/phones/motorola-xoom-with-wi-fi.5.jpg\"],\n          \"name\": \"Motorola XOOM™ with Wi-Fi\",\n          \"sizeAndWeight\": {\n            \"dimensions\": [\"249.1 mm (w)\", \"167.8 mm (h)\", \"12.9 mm (d)\"],\n            \"weight\": \"708.0 grams\"\n          },\n          \"storage\": {\n            \"flash\": \"32000MB\",\n            \"ram\": \"1000MB\"\n          }\n        };\n      }\n\n      // Create a fallback phone object with minimal data\n      return {\n        id: phoneId,\n        name: \"Phone Details Unavailable\",\n        description: \"Sorry, we couldn't load the details for this phone.\",\n        images: []\n      };\n    }\n  }\n};\nexport default PhoneService;","map":{"version":3,"names":["PhoneService","getPhones","console","log","response","fetch","status","headers","entries","ok","Error","textContent","text","substring","cleanedText","replace","data","JSON","parse","Array","isArray","error","parseError","getPhone","phoneId","id","name","description","images"],"sources":["/Users/Sergey_Shakhmatov/Projects/epam/codemie/angularjs-to-react-ai-conversion/react-phonecat/src/services/PhoneService.js"],"sourcesContent":["// PhoneService.js - This service replaces the $http functionality from AngularJS\nconst PhoneService = {\n  // Get all phones\n  getPhones: async () => {\n    try {\n      console.log('Fetching phones from API...');\n      // Direct path to the JSON file in the public folder\n      const response = await fetch('/assets/phones/phones.json');\n      \n      console.log('Response status:', response.status);\n      console.log('Response headers:', [...response.headers.entries()]);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      \n      // Get the text content first\n      const textContent = await response.text();\n      console.log('Raw text content:', textContent.substring(0, 100) + '...');\n      \n      // Clean the text content to fix any invalid control characters\n      const cleanedText = textContent\n        .replace(/[\\r\\n]+/g, ' ') // Replace carriage returns and newlines with space\n        .replace(/\\t/g, ' ')      // Replace tabs with space\n        .replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, ''); // Remove control chars\n      \n      // Parse the cleaned JSON\n      try {\n        const data = JSON.parse(cleanedText);\n        console.log('Phone data received:', data);\n        \n        if (Array.isArray(data)) {\n          return data;\n        } else {\n          console.error('Received data is not an array:', data);\n          return [];\n        }\n      } catch (parseError) {\n        console.error('Error parsing phones JSON:', parseError);\n        console.log('Using hardcoded phone data as fallback');\n        \n        // Fallback to hardcoded data if JSON parsing fails\n        return [\n          {\n            \"age\": 0,\n            \"id\": \"motorola-xoom-with-wi-fi\",\n            \"imageUrl\": \"img/phones/motorola-xoom-with-wi-fi.0.jpg\",\n            \"name\": \"Motorola XOOM™ with Wi-Fi\",\n            \"snippet\": \"The Next, Next Generation\\n\\nExperience the future with Motorola XOOM with Wi-Fi, the world's first tablet powered by Android 3.0 (Honeycomb).\"\n          },\n          {\n            \"age\": 1,\n            \"id\": \"motorola-xoom\",\n            \"imageUrl\": \"img/phones/motorola-xoom.0.jpg\",\n            \"name\": \"MOTOROLA XOOM™\",\n            \"snippet\": \"The Next, Next Generation\\n\\nExperience the future with MOTOROLA XOOM, the world's first tablet powered by Android 3.0 (Honeycomb).\"\n          }\n        ];\n      }\n    } catch (error) {\n      console.error('Error fetching phones:', error);\n      console.log('Using hardcoded fallback data');\n      \n      // Fallback to hardcoded data if fetch fails\n      return [\n        {\n          \"age\": 0,\n          \"id\": \"motorola-xoom-with-wi-fi\",\n          \"imageUrl\": \"img/phones/motorola-xoom-with-wi-fi.0.jpg\",\n          \"name\": \"Motorola XOOM™ with Wi-Fi\",\n          \"snippet\": \"The Next, Next Generation\\n\\nExperience the future with Motorola XOOM with Wi-Fi, the world's first tablet powered by Android 3.0 (Honeycomb).\"\n        },\n        {\n          \"age\": 1,\n          \"id\": \"motorola-xoom\",\n          \"imageUrl\": \"img/phones/motorola-xoom.0.jpg\",\n          \"name\": \"MOTOROLA XOOM™\",\n          \"snippet\": \"The Next, Next Generation\\n\\nExperience the future with MOTOROLA XOOM, the world's first tablet powered by Android 3.0 (Honeycomb).\"\n        }\n      ];\n    }\n  },\n\n  // Get a specific phone by ID\n  getPhone: async (phoneId) => {\n    try {\n      console.log(`Fetching phone with ID: ${phoneId}`);\n      const response = await fetch(`/assets/phones/${phoneId}.json`);\n      \n      console.log(`Phone ${phoneId} response status:`, response.status);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      \n      // Get the text content first\n      const textContent = await response.text();\n      console.log(`Phone ${phoneId} raw text:`, textContent.substring(0, 100) + '...');\n      \n      // Clean the text content to fix any invalid control characters\n      const cleanedText = textContent\n        .replace(/[\\r\\n]+/g, ' ') // Replace carriage returns and newlines with space\n        .replace(/\\t/g, ' ')      // Replace tabs with space\n        .replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, ''); // Remove control chars\n      \n      // Parse the cleaned JSON\n      try {\n        const data = JSON.parse(cleanedText);\n        console.log(`Phone ${phoneId} data received:`, data);\n        return data;\n      } catch (parseError) {\n        console.error(`Error parsing phone ${phoneId} JSON:`, parseError);\n        \n        // If we have motorola-xoom-with-wi-fi as a fallback, use it\n        if (phoneId === 'motorola-xoom-with-wi-fi') {\n          return {\n            \"additionalFeatures\": \"Sensors: proximity, ambient light, barometer, gyroscope\",\n            \"android\": {\n              \"os\": \"Android 3.0\",\n              \"ui\": \"Honeycomb\"\n            },\n            \"availability\": [\n              \"Verizon\"\n            ],\n            \"battery\": {\n              \"standbyTime\": \"336 hours\",\n              \"talkTime\": \"24 hours\",\n              \"type\": \"Other (12 500 mAH)\"\n            },\n            \"camera\": {\n              \"features\": [\n                \"Flash\",\n                \"Video\"\n              ],\n              \"primary\": \"5.0 megapixels\"\n            },\n            \"connectivity\": {\n              \"bluetooth\": \"Bluetooth 2.1\",\n              \"cell\": \"CDMA 800 /1900 LTE 700, Rx diversity in all bands\",\n              \"gps\": true,\n              \"infrared\": false,\n              \"wifi\": \"802.11 a/b/g/n\"\n            },\n            \"description\": \"Motorola XOOM with Wi-Fi has a super-powerful dual-core processor and Android™ 3.0 (Honeycomb) — the Android platform designed specifically for tablets. With its 10.1-inch HD widescreen display, you'll enjoy HD video in a thin, light, powerful and upgradeable tablet.\",\n            \"display\": {\n              \"screenResolution\": \"WXGA (1200 x 800)\",\n              \"screenSize\": \"10.1 inches\",\n              \"touchScreen\": true\n            },\n            \"hardware\": {\n              \"accelerometer\": true,\n              \"audioJack\": \"3.5mm\",\n              \"cpu\": \"1 GHz Dual Core Tegra 2\",\n              \"fmRadio\": false,\n              \"physicalKeyboard\": false,\n              \"usb\": \"USB 2.0\"\n            },\n            \"id\": \"motorola-xoom-with-wi-fi\",\n            \"images\": [\n              \"img/phones/motorola-xoom-with-wi-fi.0.jpg\",\n              \"img/phones/motorola-xoom-with-wi-fi.1.jpg\",\n              \"img/phones/motorola-xoom-with-wi-fi.2.jpg\",\n              \"img/phones/motorola-xoom-with-wi-fi.3.jpg\",\n              \"img/phones/motorola-xoom-with-wi-fi.4.jpg\",\n              \"img/phones/motorola-xoom-with-wi-fi.5.jpg\"\n            ],\n            \"name\": \"Motorola XOOM™ with Wi-Fi\",\n            \"sizeAndWeight\": {\n              \"dimensions\": [\n                \"249.1 mm (w)\",\n                \"167.8 mm (h)\",\n                \"12.9 mm (d)\"\n              ],\n              \"weight\": \"708.0 grams\"\n            },\n            \"storage\": {\n              \"flash\": \"32000MB\",\n              \"ram\": \"1000MB\"\n            }\n          };\n        }\n        \n        // Create a fallback phone object with minimal data\n        return {\n          id: phoneId,\n          name: \"Phone Details Unavailable\",\n          description: \"Sorry, we couldn't load the details for this phone.\",\n          images: []\n        };\n      }\n    } catch (error) {\n      console.error(`Error fetching phone ${phoneId}:`, error);\n      \n      // If we have motorola-xoom-with-wi-fi as a fallback, use it\n      if (phoneId === 'motorola-xoom-with-wi-fi') {\n        return {\n          \"additionalFeatures\": \"Sensors: proximity, ambient light, barometer, gyroscope\",\n          \"android\": {\n            \"os\": \"Android 3.0\",\n            \"ui\": \"Honeycomb\"\n          },\n          \"availability\": [\n            \"Verizon\"\n          ],\n          \"battery\": {\n            \"standbyTime\": \"336 hours\",\n            \"talkTime\": \"24 hours\",\n            \"type\": \"Other (12 500 mAH)\"\n          },\n          \"camera\": {\n            \"features\": [\n              \"Flash\",\n              \"Video\"\n            ],\n            \"primary\": \"5.0 megapixels\"\n          },\n          \"connectivity\": {\n            \"bluetooth\": \"Bluetooth 2.1\",\n            \"cell\": \"CDMA 800 /1900 LTE 700, Rx diversity in all bands\",\n            \"gps\": true,\n            \"infrared\": false,\n            \"wifi\": \"802.11 a/b/g/n\"\n          },\n          \"description\": \"Motorola XOOM with Wi-Fi has a super-powerful dual-core processor and Android™ 3.0 (Honeycomb) — the Android platform designed specifically for tablets. With its 10.1-inch HD widescreen display, you'll enjoy HD video in a thin, light, powerful and upgradeable tablet.\",\n          \"display\": {\n            \"screenResolution\": \"WXGA (1200 x 800)\",\n            \"screenSize\": \"10.1 inches\",\n            \"touchScreen\": true\n          },\n          \"hardware\": {\n            \"accelerometer\": true,\n            \"audioJack\": \"3.5mm\",\n            \"cpu\": \"1 GHz Dual Core Tegra 2\",\n            \"fmRadio\": false,\n            \"physicalKeyboard\": false,\n            \"usb\": \"USB 2.0\"\n          },\n          \"id\": \"motorola-xoom-with-wi-fi\",\n          \"images\": [\n            \"img/phones/motorola-xoom-with-wi-fi.0.jpg\",\n            \"img/phones/motorola-xoom-with-wi-fi.1.jpg\",\n            \"img/phones/motorola-xoom-with-wi-fi.2.jpg\",\n            \"img/phones/motorola-xoom-with-wi-fi.3.jpg\",\n            \"img/phones/motorola-xoom-with-wi-fi.4.jpg\",\n            \"img/phones/motorola-xoom-with-wi-fi.5.jpg\"\n          ],\n          \"name\": \"Motorola XOOM™ with Wi-Fi\",\n          \"sizeAndWeight\": {\n            \"dimensions\": [\n              \"249.1 mm (w)\",\n              \"167.8 mm (h)\",\n              \"12.9 mm (d)\"\n            ],\n            \"weight\": \"708.0 grams\"\n          },\n          \"storage\": {\n            \"flash\": \"32000MB\",\n            \"ram\": \"1000MB\"\n          }\n        };\n      }\n      \n      // Create a fallback phone object with minimal data\n      return {\n        id: phoneId,\n        name: \"Phone Details Unavailable\",\n        description: \"Sorry, we couldn't load the details for this phone.\",\n        images: []\n      };\n    }\n  },\n};\n\nexport default PhoneService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import axios from 'axios';\n\n// We'll use axios instead of $resource from AngularJS\nconst PhoneService = {\n  // Get all phones\n  getPhones: async () => {\n    try {\n      console.log('Fetching phones from correct path...');\n      // Direct path to the JSON file in the public folder\n      const response = await fetch('/assets/phones/phones.json');\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      // Get the text content first\n      const textContent = await response.text();\n\n      // Clean the text content to fix any invalid control characters\n      const cleanedText = textContent.replace(/[\\r\\n]+/g, '\\\\n') // Replace carriage returns and newlines with \\n\n      .replace(/\\t/g, '\\\\t') // Replace tabs with \\t\n      .replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, ''); // Remove control chars\n\n      // Parse the cleaned JSON\n      try {\n        const data = JSON.parse(cleanedText);\n        console.log('Phone data received:', data);\n        if (Array.isArray(data)) {\n          return data;\n        } else {\n          console.error('Received data is not an array:', data);\n          return [];\n        }\n      } catch (parseError) {\n        console.error('Error parsing phones JSON:', parseError);\n        console.log('Using hardcoded phone data as fallback');\n\n        // Fallback to hardcoded data if JSON parsing fails\n        return [{\n          \"age\": 0,\n          \"id\": \"motorola-xoom-with-wi-fi\",\n          \"imageUrl\": \"img/phones/motorola-xoom-with-wi-fi.0.jpg\",\n          \"name\": \"Motorola XOOM™ with Wi-Fi\",\n          \"snippet\": \"The Next, Next Generation\\n\\nExperience the future with Motorola XOOM with Wi-Fi, the world's first tablet powered by Android 3.0 (Honeycomb).\"\n        }, {\n          \"age\": 1,\n          \"id\": \"motorola-xoom\",\n          \"imageUrl\": \"img/phones/motorola-xoom.0.jpg\",\n          \"name\": \"MOTOROLA XOOM™\",\n          \"snippet\": \"The Next, Next Generation\\n\\nExperience the future with MOTOROLA XOOM, the world's first tablet powered by Android 3.0 (Honeycomb).\"\n        }];\n      }\n    } catch (error) {\n      console.error('Error fetching phones:', error);\n      return [];\n    }\n  },\n  // Get a specific phone by ID\n  getPhone: async phoneId => {\n    try {\n      console.log(`Fetching phone with ID: ${phoneId}`);\n      const response = await fetch(`/assets/phones/${phoneId}.json`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      // Get the text content first\n      const textContent = await response.text();\n\n      // Clean the text content to fix any invalid control characters\n      const cleanedText = textContent.replace(/[\\r\\n]+/g, '\\\\n') // Replace carriage returns and newlines with \\n\n      .replace(/\\t/g, '\\\\t') // Replace tabs with \\t\n      .replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, ''); // Remove control chars\n\n      // Parse the cleaned JSON\n      try {\n        const data = JSON.parse(cleanedText);\n        console.log(`Phone ${phoneId} data received:`, data);\n        return data;\n      } catch (parseError) {\n        console.error(`Error parsing phone ${phoneId} JSON:`, parseError);\n        return null;\n      }\n    } catch (error) {\n      console.error(`Error fetching phone ${phoneId}:`, error);\n      return null;\n    }\n  }\n};\nexport default PhoneService;","map":{"version":3,"names":["axios","PhoneService","getPhones","console","log","response","fetch","ok","Error","status","textContent","text","cleanedText","replace","data","JSON","parse","Array","isArray","error","parseError","getPhone","phoneId"],"sources":["/Users/Sergey_Shakhmatov/Projects/epam/codemie/angularjs-to-react-ai-conversion/react-phonecat/src/services/PhoneService.js"],"sourcesContent":["import axios from 'axios';\n\n// We'll use axios instead of $resource from AngularJS\nconst PhoneService = {\n  // Get all phones\n  getPhones: async () => {\n    try {\n      console.log('Fetching phones from correct path...');\n      // Direct path to the JSON file in the public folder\n      const response = await fetch('/assets/phones/phones.json');\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      \n      // Get the text content first\n      const textContent = await response.text();\n      \n      // Clean the text content to fix any invalid control characters\n      const cleanedText = textContent\n        .replace(/[\\r\\n]+/g, '\\\\n') // Replace carriage returns and newlines with \\n\n        .replace(/\\t/g, '\\\\t')      // Replace tabs with \\t\n        .replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, ''); // Remove control chars\n      \n      // Parse the cleaned JSON\n      try {\n        const data = JSON.parse(cleanedText);\n        console.log('Phone data received:', data);\n        \n        if (Array.isArray(data)) {\n          return data;\n        } else {\n          console.error('Received data is not an array:', data);\n          return [];\n        }\n      } catch (parseError) {\n        console.error('Error parsing phones JSON:', parseError);\n        console.log('Using hardcoded phone data as fallback');\n        \n        // Fallback to hardcoded data if JSON parsing fails\n        return [\n          {\n            \"age\": 0,\n            \"id\": \"motorola-xoom-with-wi-fi\",\n            \"imageUrl\": \"img/phones/motorola-xoom-with-wi-fi.0.jpg\",\n            \"name\": \"Motorola XOOM™ with Wi-Fi\",\n            \"snippet\": \"The Next, Next Generation\\n\\nExperience the future with Motorola XOOM with Wi-Fi, the world's first tablet powered by Android 3.0 (Honeycomb).\"\n          },\n          {\n            \"age\": 1,\n            \"id\": \"motorola-xoom\",\n            \"imageUrl\": \"img/phones/motorola-xoom.0.jpg\",\n            \"name\": \"MOTOROLA XOOM™\",\n            \"snippet\": \"The Next, Next Generation\\n\\nExperience the future with MOTOROLA XOOM, the world's first tablet powered by Android 3.0 (Honeycomb).\"\n          }\n        ];\n      }\n    } catch (error) {\n      console.error('Error fetching phones:', error);\n      return [];\n    }\n  },\n\n  // Get a specific phone by ID\n  getPhone: async (phoneId) => {\n    try {\n      console.log(`Fetching phone with ID: ${phoneId}`);\n      const response = await fetch(`/assets/phones/${phoneId}.json`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      \n      // Get the text content first\n      const textContent = await response.text();\n      \n      // Clean the text content to fix any invalid control characters\n      const cleanedText = textContent\n        .replace(/[\\r\\n]+/g, '\\\\n') // Replace carriage returns and newlines with \\n\n        .replace(/\\t/g, '\\\\t')      // Replace tabs with \\t\n        .replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, ''); // Remove control chars\n      \n      // Parse the cleaned JSON\n      try {\n        const data = JSON.parse(cleanedText);\n        console.log(`Phone ${phoneId} data received:`, data);\n        return data;\n      } catch (parseError) {\n        console.error(`Error parsing phone ${phoneId} JSON:`, parseError);\n        return null;\n      }\n    } catch (error) {\n      console.error(`Error fetching phone ${phoneId}:`, error);\n      return null;\n    }\n  },\n};\n\nexport default PhoneService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
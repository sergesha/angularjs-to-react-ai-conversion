{"ast":null,"code":"import axios from 'axios';\n\n// We'll use axios instead of $resource from AngularJS\nconst PhoneService = {\n  // Get all phones\n  getPhones: async () => {\n    try {\n      console.log('Fetching phones from correct path...');\n      // Direct path to the JSON file in the public folder\n      const response = await fetch('/assets/phones/phones.json');\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Phone data received:', data);\n      return data; // This should be an array\n    } catch (error) {\n      console.error('Error fetching phones:', error);\n      return [];\n    }\n  },\n  // Get a specific phone by ID\n  getPhone: async phoneId => {\n    try {\n      console.log(`Fetching phone with ID: ${phoneId}`);\n      const response = await fetch(`/assets/phones/${phoneId}.json`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(`Phone ${phoneId} data received:`, data);\n      return data;\n    } catch (error) {\n      console.error(`Error fetching phone ${phoneId}:`, error);\n      return null;\n    }\n  }\n};\nexport default PhoneService;","map":{"version":3,"names":["axios","PhoneService","getPhones","console","log","response","fetch","ok","Error","status","data","json","error","getPhone","phoneId"],"sources":["/Users/Sergey_Shakhmatov/Projects/epam/codemie/angularjs-to-react-ai-conversion/react-phonecat/src/services/PhoneService.js"],"sourcesContent":["import axios from 'axios';\n\n// We'll use axios instead of $resource from AngularJS\nconst PhoneService = {\n  // Get all phones\n  getPhones: async () => {\n    try {\n      console.log('Fetching phones from correct path...');\n      // Direct path to the JSON file in the public folder\n      const response = await fetch('/assets/phones/phones.json');\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Phone data received:', data);\n      \n      return data; // This should be an array\n    } catch (error) {\n      console.error('Error fetching phones:', error);\n      return [];\n    }\n  },\n\n  // Get a specific phone by ID\n  getPhone: async (phoneId) => {\n    try {\n      console.log(`Fetching phone with ID: ${phoneId}`);\n      const response = await fetch(`/assets/phones/${phoneId}.json`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log(`Phone ${phoneId} data received:`, data);\n      return data;\n    } catch (error) {\n      console.error(`Error fetching phone ${phoneId}:`, error);\n      return null;\n    }\n  },\n};\n\nexport default PhoneService;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAG;EACnB;EACAC,SAAS,EAAE,MAAAA,CAAA,KAAY;IACrB,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;MACnD;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,CAAC;MAE1D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAClCR,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEM,IAAI,CAAC;MAEzC,OAAOA,IAAI,CAAC,CAAC;IACf,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdT,OAAO,CAACS,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,OAAO,EAAE;IACX;EACF,CAAC;EAED;EACAC,QAAQ,EAAE,MAAOC,OAAO,IAAK;IAC3B,IAAI;MACFX,OAAO,CAACC,GAAG,CAAC,2BAA2BU,OAAO,EAAE,CAAC;MACjD,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,kBAAkBQ,OAAO,OAAO,CAAC;MAE9D,IAAI,CAACT,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAClCR,OAAO,CAACC,GAAG,CAAC,SAASU,OAAO,iBAAiB,EAAEJ,IAAI,CAAC;MACpD,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdT,OAAO,CAACS,KAAK,CAAC,wBAAwBE,OAAO,GAAG,EAAEF,KAAK,CAAC;MACxD,OAAO,IAAI;IACb;EACF;AACF,CAAC;AAED,eAAeX,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}